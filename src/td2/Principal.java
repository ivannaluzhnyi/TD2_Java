package td2;

import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Principal extends javax.swing.JFrame {

    /** Creates new form Principal */
    public Principal() {
        initComponents();
    }
    
    // Le gestionnaire
    Gestionnaire gst;
    
    ArrayList<Certification> mesCertifs = new ArrayList<Certification>();
    Vector v = null;
    
    // Pour les JTABLES
    DefaultTableModel dtmSalaries = null;
    DefaultTableModel dtmCertifications = null;
    DefaultTableModel dtmCompetences = null;
    
    Salarie salarie = null;
    
    Certification laCertif = null;
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCertifications = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCompetences = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmdModifier = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSalaries = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboSalaries = new javax.swing.JComboBox<>();
        cboCertifications = new javax.swing.JComboBox<>();
        btnInscription = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCertifications.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Niveau de difficulté"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCertifications);

        tblCompetences.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Validée (oui / non)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCompetences);

        jLabel2.setText("Liste des compétences");

        cmdModifier.setText("Modifier");
        cmdModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdModifierActionPerformed(evt);
            }
        });

        jLabel3.setText("Liste des salariés");

        tblSalaries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Prénom"
            }
        ));
        jScrollPane3.setViewportView(tblSalaries);

        jLabel4.setText("Liste des certifications");

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INSCRIPTION");

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        jLabel5.setText("Choix du salarié");

        jLabel6.setText("Choix de ses certifications");

        cboSalaries.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSalariesItemStateChanged(evt);
            }
        });

        cboCertifications.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCertificationsItemStateChanged(evt);
            }
        });

        btnInscription.setText("Inscription");
        btnInscription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInscriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(31, 31, 31)
                        .addComponent(cboSalaries, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(cboCertifications, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(cmdModifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInscription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnInscription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(cboSalaries, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboCertifications, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmdModifier)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        // Le gestionnaire
        gst = new Gestionnaire();
        // Pour les JTABLES        
        dtmSalaries = (DefaultTableModel)tblSalaries.getModel();
        dtmCertifications = (DefaultTableModel)tblCertifications.getModel();
        dtmCompetences = (DefaultTableModel)tblCompetences.getModel();
        
        // Les salariés
        Salarie s1 = new Salarie("Garnier","François");
        Salarie s2 = new Salarie("Girard","Michel");
        Salarie s3 = new Salarie("Alison","Benjamin");
        Salarie s4 = new Salarie("Gand","Christophe");
        Salarie s5 = new Salarie("Nicolet","Stéphane");
        
        // Ajout des salariés à la liste de tous les salariés
        gst.AjouterSalarie(s1);gst.AjouterSalarie(s2);
        gst.AjouterSalarie(s3);gst.AjouterSalarie(s4);
        gst.AjouterSalarie(s5);

        // Affichage de tous les salariés dans le JTABLE
        for (Salarie s : gst.getTousLesSalaries())
        {
            v = new Vector();
            v.add(s.getNom());
            v.add(s.getPrenom());
            dtmSalaries.addRow(v);
        }
        
        // Les certifications
        Certification certif1 = new Certification("70-536", 100);
        Certification certif2 = new Certification("70-502", 200);
        Certification certif3 = new Certification("70-503", 300);
        
        // Déclaration et instanciation d'objets de type COMPETENCE
        Competence comp1 = new Competence("Gestion des données", false);
        Competence comp2 = new Competence("Collections", false);

        Competence comp3 = new Competence("Sérialisation", false);
        Competence comp4 = new Competence("Thread", false);

        Competence comp5 = new Competence("Services windows", false);
        Competence comp6 = new Competence("Les contrôles WPF", false);

        // On ajoute les 2 premières compétences à la certification certif1
        certif1.ajouterCompetence(comp1);
        certif1.ajouterCompetence(comp2);
        // On ajoute les 2 compétences suivantes à la certification certif2
        certif2.ajouterCompetence(comp3);
        certif2.ajouterCompetence(comp4);
        // On ajoute les 2 dernières compétences à la certification certif3
        certif3.ajouterCompetence(comp5);
        certif3.ajouterCompetence(comp6);

        // On ajoute nos certifs à notre gestionnaire
        gst.getToutesLesCertifications().add(certif1);
        gst.getToutesLesCertifications().add(certif2);
        gst.getToutesLesCertifications().add(certif3);
        
        // On remplit le JTABLE
        for(Certification c : gst.getToutesLesCertifications())
        {
            v = new Vector();
            v.add(c.getNomCertif());
            v.add(c.getNiveau());
            dtmCertifications.addRow(v);
        }
    }//GEN-LAST:event_formWindowOpened

    private void cmdModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdModifierActionPerformed
        // TODO add your handling code here:
        for(int i = 0 ; i < tblCompetences.getRowCount() ; i++)
        {
            gst.getLesSalariesInscrits().get(cboSalaries.getSelectedIndex())
            .getSesCertifications().get(cboCertifications.getSelectedIndex())
                    .getLesCompetences().get(i).setValide(Boolean.valueOf(tblCompetences.getValueAt(i, 1).toString()));
        }
    }//GEN-LAST:event_cmdModifierActionPerformed

    private void btnInscriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInscriptionActionPerformed
        // TODO add your handling code here:
        boolean trouveCertif = false;
        boolean trouveSalarie = false;
        boolean estVide = false;
        if(tblSalaries.getSelectedRow()== -1)
        {
            JOptionPane.showMessageDialog(this, "Sélectionner un salarié");
        }
        else
        {
            if(tblCertifications.getSelectedRow() == -1)
            {
                JOptionPane.showMessageDialog(this, "Sélectionner une certification");
            }
            else
            {
                // On test s'il y a déjà des inscrits
                // Au départ AUCUN inscrit
                
                if(gst.getLesSalariesInscrits().isEmpty())
                {
                    // On peut inscrire ce salarié à cette certification
                    // Déclaration d'un nouveau salarié inscrit
                    Salarie s = new Salarie(tblSalaries.getValueAt(tblSalaries.getSelectedRow(), 0).toString(), tblSalaries.getValueAt(tblSalaries.getSelectedRow(), 1).toString());
                     // On ajoute sa certification à sa liste
                    Certification c = new Certification(
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNomCertif(),
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNiveau()
                    );
                    
                    // On ajoute les compétences de la certif
                    
                    for(Competence comp : gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getLesCompetences())
                    {
                        Competence cpt = new Competence(comp.getNomComp(), comp.getValide());
                        c.ajouterCompetence(cpt);
                    }
                     s.getSesCertifications().add(c);
                    // On l'ajoute à notre liste des inscrits dans le gestionnaire
                    gst.getLesSalariesInscrits().add(s);
                    trouveSalarie = true;
                    estVide = true;
                }
                else
                {
                    // On vérifie que le salarié n'est pas déjà inscrit pour cette certification
                    // On parcourt la liste des inscrits
                    
                    int i = 0;
                    for(Salarie s : gst.getLesSalariesInscrits())
                    {
                        // Si on a trouvé le salarié : ça veut dire qu'il est déjà inscrit 
                        if(s.getNom().compareTo(tblSalaries.getValueAt(tblSalaries.getSelectedRow(), 0).toString())==0)
                        {
                            trouveSalarie = true;
                            salarie = s;
                            // Donc on va rechercher la certification 
                            // pour savoir s'il n'est pas déjà inscrit à cette certif
                            for(Certification c : gst.getLesSalariesInscrits().get(i).getSesCertifications())
                            {
                                if(c.getNomCertif().compareTo(tblCertifications.getValueAt(tblCertifications.getSelectedRow(), 0).toString())==0)
                                {
                                    trouveCertif = true;
                                    break;
                                }
                            }
                        }
                    }
                }   
                // On test si on a trouvé la certif
                // OUI
                if(trouveCertif)
                {
                    // Donc déjà inscrit à cette certif
                    JOptionPane.showMessageDialog(this, "Déjà inscrit à cette certification");
                }
                else
                {
                    if(!trouveSalarie)
                    {
                        // On peut inscrire ce salarié à cette certification
                        // Déclaration d'un nouveau salarié inscrit
                        Salarie s = new Salarie(tblSalaries.getValueAt(tblSalaries.getSelectedRow(), 0).toString(), tblSalaries.getValueAt(tblSalaries.getSelectedRow(), 1).toString());
                         // On ajoute sa certification à sa liste
                         Certification c = new Certification(
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNomCertif(),
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNiveau()
                    );
                         // On ajoute les compétences de la certif
                    
                    for(Competence comp : gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getLesCompetences())
                    {
                        Competence cpt = new Competence(comp.getNomComp(), comp.getValide());
                        c.ajouterCompetence(cpt);
                    }
                         s.getSesCertifications().add(c);
                        // On l'ajoute à notre liste des inscrits dans le gestionnaire
                        gst.getLesSalariesInscrits().add(s);
                    }
                    else
                    {
                        if(!estVide)
                        {
                            // On ajoute la certification au salarié
                            Certification c = new Certification(
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNomCertif(),
                    gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getNiveau()
                    );
                            // On ajoute les compétences de la certif
                    
                    for(Competence comp : gst.getToutesLesCertifications().get(tblCertifications.getSelectedRow()).getLesCompetences())
                    {
                        Competence cpt = new Competence(comp.getNomComp(), comp.getValide());
                        c.ajouterCompetence(cpt);
                    }
                            salarie.getSesCertifications().add(c);
                        }
                    }
                    // On remplit la ComboBox des inscrits
                    // On la vide dans un premier temps pour la remettre à vide
                    cboSalaries.removeAllItems();;
                    for (Salarie sal : gst.getLesSalariesInscrits())
                    {
                        cboSalaries.addItem(sal.getNom());
                    }
                }    
            }
        }
    }//GEN-LAST:event_btnInscriptionActionPerformed

    private void cboSalariesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSalariesItemStateChanged
        // TODO add your handling code here:
        
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
            cboCertifications.removeAllItems();
            for(Certification c : gst.getLesSalariesInscrits().get(cboSalaries.getSelectedIndex()).getSesCertifications())
            {
                cboCertifications.addItem(c.getNomCertif());
            }
        }
    }//GEN-LAST:event_cboSalariesItemStateChanged

    private void cboCertificationsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCertificationsItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED)
        {
            // On efface le JTABLE des compétences
            while(dtmCompetences.getRowCount()!=0)
            {
                dtmCompetences.removeRow(0);
            }
            for(Competence c : gst.getLesSalariesInscrits().get(cboSalaries.getSelectedIndex()).getSesCertifications().get(cboCertifications.getSelectedIndex()).getLesCompetences())
            {
                v = new Vector();
                v.add(c.getNomComp());
                v.add(c.getValide());
                dtmCompetences.addRow(v);
            }
        }
    }//GEN-LAST:event_cboCertificationsItemStateChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInscription;
    private javax.swing.JComboBox<String> cboCertifications;
    private javax.swing.JComboBox<String> cboSalaries;
    private javax.swing.JButton cmdModifier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblCertifications;
    private javax.swing.JTable tblCompetences;
    private javax.swing.JTable tblSalaries;
    // End of variables declaration//GEN-END:variables

}
